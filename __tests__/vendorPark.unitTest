const supertest = require('supertest');
const app = require('../app');
const mongoose = require("mongoose")
const Vendor = mongoose.model("Vendor")

const userController = require('../controllers/userController.js');
const vendorRouter = require('../routes/vendorRouter');
//mock function calls by vendorPark()
    describe('userControll', function() {
    beforeAll(()=>{
    Vendor.updateOne = jest.fn();

    Vendor.findOne = jest.fn(() => 'default')
    .mockImplementationOnce(req => 
        {
            return {
                "_id":"60b287fda745ad00153f0421",
                "isOnline":true,
                "username":"ZxyTest",
                "password":"$2a$10$2dI0qoXVACfGOOYYMiVSIOOjIjJL86KeehYdvkRCcE2rm4fyheo1e",
                "createdAt":"1622312957661",
                "updatedAt":"1622374091549",
                "__v":"0",
                "location":["43.654761659731946", "-79.45038658170725"],
                "textAddress":"stop3"
            }

        })
    .mockImplementationOnce(req => 
        {
            return {
                "_id":"60b287fda745ad00153f0421",
                "isOnline":false,
                "username":"ZxyTest",
                "password":"$2a$10$2dI0qoXVACfGOOYYMiVSIOOjIjJL86KeehYdvkRCcE2rm4fyheo1e",
                "createdAt":"1622312957661",
                "updatedAt":"1622374091549",
                "__v":"0",
                "location":["43.654761659731946", "-79.45038658170725"],
                "textAddress":"stop3"
            }

        })
    });
    const mockres ={
        updatedVendor:
        {
            success: true, 
            message: ["Your parked sucessfully."], 
            updatedVendor:
            {
                "_id":"60b287fda745ad00153f0421",
                "isOnline":false,
            }
        }};

    const mockreq = 
        {
        "body":
            {
                "_id":"60b287fda745ad00153f0421",
                "isOnline":false,
            }
        };

    userController.vendorPark(mockreq, mockres);
})
describe('vendorPark function', () => {
    test('Should Return Updated User Status (true -> false) ', () => {
        expect(mockres.updatedVendor.updatedVendor.isOnline).toEqual(false);
    });
});





/*
const mockRequest = (isOnline) => ({
    body:
        {
            _id:"60b287fda745ad00153f0421",
            isOnline:isOnline
        }
  });
  
  const mockResponse = () => {
    const res = {};
    res.status = jest.fn().mockReturnValue(res);
    res.json = jest.fn().mockReturnValue(res);
    return res;
  };
  
  const userController = require('../controllers/userController.js');
  
  describe('userController.vendorPark Test', () => {
    test('should set should set online status to req if vendor is found', async () => {
      const req = mockRequest(true);
      const res = mockResponse();
      await userController.vendorPark(req, res, () => {
          if (if req.isOnline)
      });
  
      expect(req.session.data).toEqual({ username: 'hugo' });
    });
    test('should not do anything if req.session.data is already set', async () => {
      const req = mockRequest('76b1e728-1c14-43f9-aa06-6de5cbc064c2', { username: 'guest' });
      const res = mockResponse();
      await headerAuthMiddleware(req, res, () => {});
  
      expect(req.session.data).toEqual({ username: 'guest' });
    });
    test('should not do anything if authorization header is not present', async () => {
      const req = mockRequest(undefined);
      const res = mockResponse();
      await headerAuthMiddleware(req, res, () => {});
  
      expect(req.session.data).toBeUndefined();
    });
    test('should not do anything if api key is invalid', async () => {
      const req = mockRequest('invalid-api-key');
      const res = mockResponse();
      await headerAuthMiddleware(req, res, () => {});
  
      expect(req.session.data).toBeUndefined();
    });
  });
  */